<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:display="flash.display.*" xmlns:filters="flash.filters.*"
		   xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:ns1="com.flexcapacitor.controls.*"
		   bottom="0" color="#ffffff" left="0" right="0" top="0"
		   hideEffect="{fade3}"
		   creationComplete="init()" keyUp="keyHandler(event)">

	<mx:Fade id="fade1"
			 effectEnd="fade2.play()"
			 alphaFrom="0" alphaTo="1" duration="250" target="this"/>
	<mx:Fade id="fade2"
			 alphaFrom="0" alphaTo="1" duration="600" startDelay="200"
			 target="{previewImage}"/>
	<mx:Fade id="fade3"
			 alphaFrom="1" alphaTo="0" duration="250" target="this"/>

	<filters:GlowFilter id="borderFilter1"
						color="#ffffff"
						alpha="1" blurX="6" blurY="6" quality="1" strength="20"/>

	<mx:Resize id="resize1"
			   duration="500" target="{previewImage}"/>

	<mx:Style>
		.rollOver {
			color: #ffffff;
			
		}
		.rollOut {
			color: #ffffff;
		}
	</mx:Style>

	<mx:Script>
		<![CDATA[
			import com.flexcapacitor.managers.ImageDragManager;
			import com.flexcapacitor.utils.ApplicationUtils;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.IList;
			import mx.collections.IViewCursor;
			import mx.collections.ListCollectionView;
			import mx.collections.ModifiedCollectionView;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.HScrollBar;
			import mx.controls.Image;
			import mx.controls.VScrollBar;
			import mx.core.Application;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.ResizeEvent;

			[Bindable]
			public var source:String = "";

			/**
			 *  An ICollectionView that represents the data provider.
			 *  When you set the <code>dataProvider</code> property,
			 *  Flex wraps the data provider as necessary to
			 *  support the ICollectionView interface and
			 *  sets this property to the result.
			 *  The ListBase class then uses this property to access
			 *  data in the provider.
			 *  When you  get the <code>dataProvider</code> property,
			 *  Flex returns this value.
			 */
			protected var collection:ICollectionView;

			/**
			 *  The main IViewCursor used to fetch items from the
			 *  data provider and pass the items to the renderers.
			 *  At the end of any sequence of code, it must always
			 *  be positioned at the topmost visible item being displayed.
			 */
			public var iterator:IViewCursor;

			/**
			 *  A separate IViewCursor used to find indices of items and
			 *  other things. The collectionIterator can be at any
			 *  place within the set of items.
			 */
			public var collectionIterator:IViewCursor;

			/**
			 *  The collection view that temporarily preserves previous
			 *  data provider state to facilitate running data change effects.
			 */
			public var modifiedCollectionView:ModifiedCollectionView;

			/**
			 *  A copy of the value normally stored in <code>collection</code>
			 *  used while running data changes effects. This value should be
			 *  null when a data change effect is not running.
			 */
			public var actualCollection:ICollectionView;

			//----------------------------------
			//  dataProvider
			//----------------------------------

			[Bindable("collectionChange")]
			[Inspectable(category="Data", defaultValue="undefined")]

			/**
			 *  Set of data to be viewed.
			 *  This property lets you use most types of objects as data providers.
			 *  If you set the <code>dataProvider</code> property to an Array,
			 *  it will be converted to an ArrayCollection. If you set the property to
			 *  an XML object, it will be converted into an XMLListCollection with
			 *  only one item. If you set the property to an XMLList, it will be
			 *  converted to an XMLListCollection.
			 *  If you set the property to an object that implements the
			 *  IList or ICollectionView interface, the object will be used directly.
			 *
			 *  <p>As a consequence of the conversions, when you get the
			 *  <code>dataProvider</code> property, it will always be
			 *  an ICollectionView, and therefore not necessarily be the type of object
			 *  you used to  you set the property.
			 *  This behavior is important to understand if you want to modify the data
			 *  in the data provider: changes to the original data may not be detected,
			 *  but changes to the ICollectionView object that you get back from the
			 *  <code>dataProvider</code> property will be detected.</p>
			 *
			 *  @default null
			 *  @see mx.collections.ICollectionView
			 */
			public function get dataProvider():Object {
				// if we are running a data change effect, return the true
				// data provider, rather than the ModifiedCollectionView wrapper.
				if (actualCollection)
					return actualCollection;

				return collection;
			}

			/**
			 *  @private
			 */
			public function set dataProvider(value:Object):void {

				if (collection) {
					collection.removeEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChangeHandler);
				}

				if (value is Array) {
					collection = new ArrayCollection(value as Array);
				}
				else if (value is ICollectionView) {
					collection = ICollectionView(value);
				}
				else if (value is IList) {
					collection = new ListCollectionView(IList(value));
				}
				else if (value is XMLList) {
					collection = new XMLListCollection(value as XMLList);
				}
				else if (value is XML) {
					var xl:XMLList = new XMLList();
					xl += value;
					collection = new XMLListCollection(xl);
				}
				else {
					// convert it to an array containing this one item
					var tmp:Array = [];
					if (value != null)
						tmp.push(value);
					collection = new ArrayCollection(tmp);
				}

				// get an iterator for the displaying rows.  The CollectionView's
				// main iterator is left unchanged so folks can use old DataSelector
				// methods if they want to
				iterator = collection.createCursor();
				collectionIterator = collection.createCursor(); //IViewCursor(collection);

				collection.addEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChangeHandler, false, 0, true);

				var event:CollectionEvent = new CollectionEvent(CollectionEvent.COLLECTION_CHANGE);
				event.kind = CollectionEventKind.RESET;
				dispatchEvent(event);

				totalCount = collection.length;

				invalidateProperties();
				invalidateSize();
				invalidateDisplayList();
			}

			protected function collectionChangeHandler(event:Event):void {

			}

			[Bindable]
			public var image:mx.controls.Image;

			[Bindable]
			public var imageName:String = "";

			[Bindable]
			public var imageWidth:int = 0;

			[Bindable]
			public var imageHeight:int = 0;

			private var _imageType:String = "";

			public var centerOfScreen:int = 0;

			public var mouseDownLocation:int = 0;

			// name of group of images
			[Bindable]
			public var groupName:String = "";

			// current index in a collection of images
			[Bindable]
			public var currentIndex:uint = 0;

			[Bindable]
			public var editMode:Boolean = false;

			// total number of images in collection
			[Bindable]
			public var totalCount:uint = 0;

			// name of image field in the current object or xml item 
			[Bindable]
			public var imageField:String = "";

			// minimum scale
			public var minimumScale:Number = .2;

			[Bindable]
			public var currentScale:Number = 1;

			public var previousImageDragManagerSetting:Boolean = false;

			[Bindable]
			public function set imageType(value:String):void {
				var fileType:String = value.substr(0, value.lastIndexOf("."));
				_imageType = fileType.toUpperCase();
			}

			public function get imageType():String {
				var fileType:String = source.substr(source.lastIndexOf(".") + 1);
				_imageType = fileType.toUpperCase();
				return _imageType;
			}

			[Bindable]
			public var fileReference:FileReference = new FileReference();

			[Bindable]
			public var request:URLRequest;


			// *** Security Sandbox Violation ***
			// SecurityDomain 'http://www.flexcapacitor.com/developer/wp-content/uploads/2008/08/67524160rhkibt0022.jpg' tried to access incompatible context 'file://localhost/Applications/MAMP/projects/sarahsite/index.html'
			// Error: Error #2039: Invalid remote URL protocol. The remote URL protocol must be HTTP or HTTPS.
			//	at flash.net::FileReference/download()
			// we get the above error when the site is local and the image is remote
			public function downloadImage():void {
				// create a new file reference instance
				var localUrl:String = application.url
				var newUrl:String = localUrl.substr(0, localUrl.lastIndexOf("/"));
				newUrl = newUrl + "/" + source;
				request = new URLRequest(newUrl);
				try {
					fileReference.download(request);
				}
				catch (event:Error) {
					Alert.show("Could not download the image because \n" + event.message);
				}
			}

			// doesnt work for some reason
			public function keyHandler(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ESCAPE && this.parent) {
					this.parent.removeChild(this);
				}
			}

			public function get application():Object {
				return ApplicationUtils.getInstance();
			}

			public function init():void {
				//FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_UP, keyHandler, false, 0, true);
				application.addEventListener(ResizeEvent.RESIZE, resizeEvent, false, 0, true);
				previewImage.addEventListener(Event.COMPLETE, imageLoadComplete, false, 0, true);

				var imageDragManager:ImageDragManager = ImageDragManager.getInstance();
				previousImageDragManagerSetting = imageDragManager.preventDragAndDrop;
				imageDragManager.preventDragAndDrop = true;
			}

			public function imageLoadComplete(event:Event):void {
				// fit image to available space
				fitImageToAvailableSpace();

				// smooth image if possible
				smoothImage();
			}

			public function fitImageToAvailableSpace():void {
				var appWidth:int = width;
				var appHeight:int = height;
				var targetScale:Number = 0;
				var centerOffset:Number = 0;
				var padding:int = 10;
				var contentWidth:int = previewImage.contentWidth + padding;
				var contentHeight:int = previewImage.contentHeight + headerBar1.height + padding;
				var scaleAmount:Number = .02;

				// reset any previous sizing and positioning
				resetScale();

				// make image fit into available area
				if (contentWidth > appWidth || contentHeight > appHeight) {

					while (contentWidth > appWidth || contentHeight > appHeight) {
						previewImage.scaleX = previewImage.scaleX - scaleAmount;
						previewImage.scaleY = previewImage.scaleY - scaleAmount;
						contentWidth = contentWidth * (1 - scaleAmount);
						contentHeight = contentHeight * (1 - scaleAmount);
					}
				}

				// get current target scale
				targetScale = previewImage.scaleX;
				currentScale = Number(targetScale.toFixed(1));
			}

			public function smoothImage():void {
				var bitmap:Bitmap;

				try {
					// if the file is on a remote server we can't smooth it - LAME!!!
					if (previewImage.childAllowsParent) {
						bitmap = (previewImage.content as Bitmap);
						if (bitmap != null) {
							bitmap.smoothing = true;
						}
					}

				}
				catch (event:Event) {
				}
			}

			public function resizeEvent(event:ResizeEvent):void {
				width = application.width;
				height = application.height;
			}

			// removes the preview as long as its not a scroll bar
			public function removePreviewEvent(event:MouseEvent):void {
				// check if the click was on the scroll bar
				var clickedOnScrollBar:Boolean = (event.target is VScrollBar || DisplayObject(event.target).parent is VScrollBar);
				clickedOnScrollBar = (!clickedOnScrollBar) ? (event.target is HScrollBar || DisplayObject(event.target).parent is HScrollBar) : clickedOnScrollBar;

				if (clickedOnScrollBar) {
					//this.parent.removeChild(this);
				}
				else {
					this.parent.removeChild(this);
				}
			}

			// remove the preview
			public function removePreview():void {
				this.parent.removeChild(this);
			}

			public function resetDragManager():void {
				var imageDragManager:ImageDragManager = ImageDragManager.getInstance();
				imageDragManager.preventDragAndDrop = previousImageDragManagerSetting;
			}

			// clicked on the image
			// we don't want it to propogate to the canvas below it
			public function imageClicked(event:MouseEvent):void {
				event.stopImmediatePropagation();
			}

			// add drag resize behavior
			public function mouseDown(event:MouseEvent):void {
				centerOfScreen = Math.round(this.width / 2);
				mouseDownLocation = event.stageX;
				this.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove, false, 0, true);
			}

			// remove the resize listener
			public function mouseUp(event:MouseEvent):void {
				this.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
				var verticalPosition:int = 0;
				var horizontalPosition:int = 0;
				var currentVerticalPosition:int = previewImage.getStyle("verticalCenter");
				var currentHorizontalPosition:int = previewImage.getStyle("horizontalCenter");

				// center on vertical scroll position
				if (background1.verticalScrollBar != null && background1.verticalScrollBar.maxScrollPosition > 0 && currentVerticalPosition == 0) {
					verticalPosition = background1.verticalScrollBar.maxScrollPosition;
					previewImage.setStyle("verticalCenter", verticalPosition);
					background1.verticalScrollPosition = verticalPosition;
				}

				// center on horizontal scroll position
			/* if (background1.horizontalScrollBar!=null &&
			   background1.horizontalScrollBar.maxScrollPosition>0 && currentHorizontalPosition==0) {
			   horizontalPosition = background1.horizontalScrollBar.maxScrollPosition;
			   previewImage.setStyle("horizontalCenter", horizontalPosition);
			   background1.horizontalScrollPosition = horizontalPosition;
			 } */
			}

			// resize the image when dragging the image
			public function mouseMove(event:MouseEvent):void {
				var verticalPosition:int = 0;
				var horizontalPosition:int = 0;
				var currentVerticalCenter:int = previewImage.getStyle("verticalCenter");
				var currentHorizontalCenter:int = previewImage.getStyle("horizontalCenter");
				var centerOffset:Number = 0;
				var targetScale:Number = 0;
				var currentHeight:Number = 0;
				var currentWidth:Number = 0;
				var maxVerticalSpace:int = 0;
				var maxHorizontalSpace:int = 0;

				// scale the image 
				centerOffset = (event.stageX - mouseDownLocation) / 100;
				targetScale = previewImage.scaleX + centerOffset;
				if (targetScale < minimumScale) {
					currentScale = minimumScale;
					return;
				}
				previewImage.scaleX = targetScale;
				previewImage.scaleY = targetScale;
				mouseDownLocation = event.stageX;
				currentScale = Number(targetScale.toFixed(1));

				// set vertical center position
				if (background1.verticalScrollBar == null) {
					previewImage.setStyle("verticalCenter", 0);
				}
				if (background1.horizontalScrollBar == null) {
					//previewImage.setStyle("horizontalCenter", 0);
				}

				// get scroll difference between current scrollbar and max scroll space 
				currentHeight = int(previewImage.contentHeight * targetScale);
				currentWidth = int(previewImage.contentWidth * targetScale);
				maxVerticalSpace = (currentHeight - background1.height) / 2;
				maxHorizontalSpace = (currentWidth - background1.width) / 2;

				// recenter to get new scroll bar positions
				if (currentVerticalCenter > 0) {
					//currentVerticalCenter = background1.verticalScrollBar.maxScrollPosition;
					previewImage.setStyle("verticalCenter", maxVerticalSpace);
					background1.verticalScrollPosition = background1.verticalScrollPosition - (currentVerticalCenter - maxVerticalSpace);
				}

				// recenter to get new scroll bar positions
				if (currentHorizontalCenter > 0) {
					//currentVerticalCenter = background1.verticalScrollBar.maxScrollPosition;
					//previewImage.setStyle("horizontalCenter", maxHorizontalSpace);
					//background1.horizontalScrollPosition = background1.horizontalScrollPosition-(currentHorizontalCenter-maxHorizontalSpace);
				}
			}

			// reset the image scale back to 1:1
			public function resetScale():void {
				previewImage.setStyle("verticalCenter", 0);
				previewImage.setStyle("horizontalCenter", 0);
				previewImage.scaleX = 1;
				previewImage.scaleY = 1;
				currentScale = 1;
			}
		]]>
	</mx:Script>

	<!-- background header bar -->
	<mx:Canvas id="headerBar1"
			   backgroundAlpha="1" backgroundColor="#000000" left="0" right="0"
			   height="22"
			   click="event.stopPropagation()"/>

	<mx:Canvas id="background1"
			   backgroundAlpha="0.8" backgroundColor="#000000" bottom="0" left="0"
			   right="0" top="22"
			   creationCompleteEffect="fade1"
			   click="removePreviewEvent(event)" mouseUp="mouseUp(event)">

		<ns1:ImageLink id="previewImage"
					   horizontalAlign="center" horizontalCenter="0"
					   verticalAlign="middle" verticalCenter="0"
					   filters="{[borderFilter1]}" source="{source}"
					   click="imageClicked(event)" mouseDown="mouseDown(event)"
					   mouseUp="mouseUp(event)"
					   alpha="0" preventDragAndDrop="true" scaleContent="false"/>
		<mx:HBox backgroundAlpha="0" left="0"
				 visible="false" y="2">
			<mx:Spacer height="2" width="2"/>
			<mx:Text id="groupNameField" text="{groupName}"/>
			<mx:Text id="sizeField0" text="{currentIndex} of {totalCount}"/>
			<mx:Text id="ratioField0" text="prev"/>
			<mx:Text id="next" text="next"/>
		</mx:HBox>
	</mx:Canvas>

	<mx:HBox backgroundAlpha="0" left="0"
			 y="2">
		<mx:Spacer height="2" width="2"/>
		<mx:Label id="imageTypeField" text="{imageType}"/>
		<mx:Label id="nameField"
				  maxWidth="300" selectable="true" text="{imageName}"
				  toolTip="{imageName}" truncateToFit="true"/>
		<mx:Label id="sizeField" text="{imageWidth}x{imageHeight}"/>
		<mx:Label id="ratioField" text="1:{currentScale}"/>
	</mx:HBox>

	<mx:HBox backgroundAlpha="0" right="0"
			 y="2">
		<ns1:TextLink id="zoom"
					  styleName="rollOut" text="Reset Zoom"
					  click="{fitImageToAvailableSpace()}"
					  rollOverStyle="rollOver"/>
		<ns1:TextLink id="actualSize"
					  styleName="rollOut" text="Actual Size"
					  click="{resetScale()}"
					  rollOverStyle="rollOver"/>

		<ns1:TextLink id="save"
					  styleName="rollOut" text="Save"
					  click="{downloadImage()}"
					  rollOverStyle="rollOver"/>
		<ns1:TextLink id="close"
					  styleName="rollOut" text="Close"
					  click="removePreview()"
					  rollOverStyle="rollOver"/>
	</mx:HBox>

</mx:Canvas>
