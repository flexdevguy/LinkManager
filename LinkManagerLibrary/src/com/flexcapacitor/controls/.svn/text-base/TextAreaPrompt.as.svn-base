/*
Copyright (c) 2007 FlexLib Contributors.  See:
http://code.google.com/p/flexlib/wiki/ProjectContributors

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
/**
 * 
 @modified Judah Frangipane
 * */
package com.flexcapacitor.controls {
	
	import flash.events.Event;
	import flash.events.FocusEvent;
	
	import mx.events.FlexEvent;
	
	import spark.components.TextArea;
	import spark.components.TextSelectionHighlighting;
	import spark.utils.TextFlowUtil;
	
	/**
	 * The <code>TextAreaPrompt</code> component adds the ability to specify a prompt
	 * value that displays when the text is empty, similar to how the prompt
	 * property of the <code>ComboBox</code> behaves when there is no selected value.
	 */
	public class TextAreaPrompt extends TextArea {
		
		/** Flag to indicate if the text is empty or not */
		private var _textEmpty:Boolean;
		
		/**
		 * Flag to prevent us from re-inserting the prompt if the text is cleared
		 * while the component still has focus.
		 */
		private var _currentlyFocused:Boolean = false;
		
		
		/**
		 * Constructor
		 */
		public function TextAreaPrompt():void {
			_textEmpty = true;
			selectionHighlighting = TextSelectionHighlighting.WHEN_FOCUSED;
			
			//addEventListener(Event.CHANGE, handleChange, false, 0, false);
			addEventListener(FocusEvent.FOCUS_IN, handleFocusIn, false, 0, false);
			addEventListener(FocusEvent.FOCUS_OUT, handleFocusOut, false, 0, false);
			addEventListener(FlexEvent.CREATION_COMPLETE, handleCreationComplete, false, 0, false);
		}
		
		protected function handleCreationComplete(event:FlexEvent):void {
			var currentPrompt:String = prompt;
			var currentText:String = super.text;
			
			if (currentText=="") {
				super.text = currentPrompt;
			}
			
			removeEventListener(FlexEvent.CREATION_COMPLETE, handleCreationComplete);
		}
		
		// ==============================================================
		//	prompt
		// ==============================================================
		
		/** Storage for the prompt property */
		private var _prompt:String = "";
		
		/**
		 * The string to use as the prompt value
		 */
		public function get prompt():String {
			return _prompt;
		}
		
		[Bindable]
		public function set prompt(value:String):void {
			_prompt = value;
			
			invalidateProperties();
			invalidateDisplayList();
		}
		
		// ==============================================================
		//	promptFormat
		// ==============================================================
		
		/** Storage for the promptFormat property */
		private var _promptStyle:String;
		
		/**
		 * NOTE: This is not implemented.
		 * Name of style to use when prompt is shown;
		 */
		public function get promptStyle():String {
			return _promptStyle;
		}
		
		public function set promptStyle(value:String):void {
			_promptStyle = value;
			
			invalidateDisplayList();
		}
		
		private var _promptColor:String = "#999999";
		
		public function get promptColor():String
		{
			return _promptColor;
		}
		
		public function set promptColor(value:String):void
		{
			_promptColor = value;
		}
		
		
		// ==============================================================
		//	text
		// ==============================================================
		
		
		/**
		 * Override the behavior of text so that it doesn't take into account
		 * the prompt.  If the prompt is displaying, the text is just an empty
		 * string.
		 */
		[Bindable("textChanged")]
		[CollapseWhiteSpace]
		[NonCommittingChangeEvent("change")]
		override public function set text(value:String):void {
			// changed the test to also test for null values, not just 0 length
			// if we were passed undefined or null then the zero length test would 
			// still return false. - Doug McCune
			_textEmpty = (!value) || value.length == 0;
			var currentText:String = super.text;
			
			// Note: this is needed to stop two-binding from recursing.
			if (currentText == value) {
				if (currentText == "") {
					super.text = prompt;
					invalidateDisplayList();
				}
				return;
			}
			
			// if we manually set the text to an empty string we leave it blank
			if (_textEmpty) {
				super.text = prompt;
				if (currentText != value) {
					invalidateDisplayList();
				}
				return;
			}
			
			super.text = value;
			//textDisplay.text = value;
			invalidateDisplayList();
		}
		
		override public function get text():String {
			var currentText:String = super.text;
			
			// If the text has changed
			if (currentText == prompt) {
				// Skip the prompt text value
				return "";
			}
			else {
				return currentText;
			}
		}
		
		/**
		 * We store a local copy of displayAsPassword. We need to keep this so that we can
		 * change it to false if we're showing the prompt. Then we change it back (if it was
		 * set to true) once we're no longer showing the prompt.
		 */
		private var _displayAsPassword:Boolean = false;
		
		override public function set displayAsPassword(value:Boolean):void {
			_displayAsPassword = value;
			super.displayAsPassword = value;
		}
		
		override public function get displayAsPassword():Boolean {
			return _displayAsPassword;
		}
		
		private var _savedColor:Number;
		
		// ==============================================================
		//	overriden methods
		// ==============================================================
		
		/**
		 * @private
		 *
		 * Determines if the prompt needs to be displayed.
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
			
			// If the text is empty and a prompt value is set and the
			// component does not currently have focus, then the component
			// needs to display the prompt
			if (_textEmpty && _prompt != "" && !_currentlyFocused) {
				_savedColor = isNaN(_savedColor) ? getStyle("color") : _savedColor;
				setStyle("color", promptColor);
				
				if (super.displayAsPassword) {
					//If we're showing the prompt and we have displayAsPassword set then
					//we need to set it to false while the prompt is showing.
					var oldVal:Boolean = _displayAsPassword;
					super.displayAsPassword = false;
					_displayAsPassword = oldVal;
				}
			}
			else {
				if (!isNaN(_savedColor)) {
					setStyle("color", _savedColor);
				}
				
				if (super.displayAsPassword != _displayAsPassword) {
					super.displayAsPassword = _displayAsPassword;
				}
			}
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		// ==============================================================
		//	event handlers
		// ==============================================================
		
		/**
		 * @private
		 */
		protected function handleChange(event:Event):void {
			_textEmpty = super.text.length == 0;
		}
		
		/**
		 * @private
		 *
		 * When the component recevies focus, check to see if the prompt
		 * needs to be cleared or not.
		 */
		protected function handleFocusIn(event:FocusEvent):void {
			var currentText:String = super.text; // this will return *** when displayAsPassword is true 
			_currentlyFocused = true;
			
			// If the text is the same as the prompt, clear the prompt
			if (currentText==prompt) {
				super.text = "";
				_textEmpty = true;
			}
			else {
				_textEmpty = false;
			}
			
		}
		
		/**
		 * When calling set focus the text is not cleared out. Needs fixed
		 * 
		 * */
		override public function setFocus():void {
			var currentText:String = super.text;
			
			// If the text is the same as the prompt, clear the prompt
			if (currentText==prompt) {
				super.text = "";
			}
			
			super.setFocus();
		}
		
		/**
		 * @private
		 *
		 * When the component loses focus, check to see if the prompt needs
		 * to be displayed or not.
		 */
		protected function handleFocusOut(event:FocusEvent):void {
			callLater(lostFocus);
		}
		
		public function lostFocus():void {
			var currentText:String = super.text;
			_currentlyFocused = false;
			
			// If the text is empty, put the prompt back
			if (currentText=="") {
				
				if (super.displayAsPassword) {
					//If we're showing the prompt and we have displayAsPassword set then
					//we need to set it to false while the prompt is showing.
					var oldVal:Boolean = _displayAsPassword;
					super.displayAsPassword = false;
					_displayAsPassword = oldVal;
				}
				super.text = prompt;
				_textEmpty = true;
			}
			else {
				_textEmpty = false;
			}
			
			invalidateDisplayList();
		}
		
		
	} // end class
} // en package